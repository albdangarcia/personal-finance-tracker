generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL") // uses connection pooling
}

model Account {
    userId            String
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type              String
    provider          String
    providerAccountId String
    access_token      String?
    token_type        String?
    scope             String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@id([provider, providerAccountId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    password      String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    // regularIncomes   Income[]
    // irregularIncomes IrregularIncome[]
    incomes       Income[]
    expenses      Expense[]
    savingsGoals  SavingsGoal[]
    debts         Debt[]
    budgets       Budget[]
    accounts      Account[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

enum Frequency {
    WEEKLY
    BIWEEKLY
    MONTHLY
}

enum IncomeType {
    REGULAR
    IRREGULAR
}

model Income {
    id         String     @id @default(cuid())
    amount     Float
    categoryId String
    category   Category   @relation(fields: [categoryId], references: [id])
    frequency  Frequency? // ["weekly", "biweekly", "monthly"]
    startDate  DateTime
    endDate    DateTime?
    yearMonth  String // Format: "YYYY-MM"
    incomeType IncomeType
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    userId     String
    User       User       @relation(fields: [userId], references: [id])

    @@map("Incomes")
}

// model RegularIncome {
//     id         String    @id @default(cuid())
//     amount     Float
//     categoryId String
//     category   Category  @relation(fields: [categoryId], references: [id])
//     frequency  Frequency // ["weekly", "biweekly", "monthly"]
//     startDate  DateTime
//     endDate    DateTime?
//     yearMonth  String    // Format: "YYYY-MM"
//     createdAt  DateTime  @default(now())
//     updatedAt  DateTime  @updatedAt
//     userId     String
//     User       User      @relation(fields: [userId], references: [id])
// }

// model IrregularIncome {
//     id         String   @id @default(cuid())
//     amount     Float
//     categoryId String
//     category   Category @relation(fields: [categoryId], references: [id])
//     date       DateTime
//     yearMonth  String    // Format: "YYYY-MM"
//     createdAt  DateTime @default(now())
//     updatedAt  DateTime @updatedAt
//     userId     String
//     User       User     @relation(fields: [userId], references: [id])
// }

model SavingsGoal {
    id            String         @id @default(cuid())
    name          String
    amount        Float
    contributions Contribution[]
    categoryId    String
    category      Category       @relation(fields: [categoryId], references: [id])
    userId        String
    User          User           @relation(fields: [userId], references: [id])
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Contribution {
    id            String      @id @default(cuid())
    amount        Float
    date          DateTime
    savingsGoalId String
    savingsGoal   SavingsGoal @relation(fields: [savingsGoalId], references: [id], onDelete: Cascade)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Debt {
    id         String        @id @default(cuid())
    name       String
    amount     Float
    interest   Float
    payments   DebtPayment[] // One-to-many relationship with Payment
    categoryId String
    category   Category      @relation(fields: [categoryId], references: [id])
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    userId     String
    User       User          @relation(fields: [userId], references: [id])
}

model DebtPayment {
    id        String   @id @default(cuid())
    amount    Float
    date      DateTime
    debtId    String
    debt      Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Expense {
    id         String   @id @default(cuid())
    name       String
    amount     Float
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    date       DateTime
    yearMonth  String // The year and month of the expense in YYYY-MM format
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String
    User       User     @relation(fields: [userId], references: [id])
}

model Budget {
    id         String   @id @default(cuid())
    amount     Float // The planned budget amount
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    userId     String
    User       User     @relation(fields: [userId], references: [id])
    yearMonth  String // The year and month of the budget in YYYY-MM format
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([categoryId, yearMonth])
}

model Category {
    id           String        @id @default(cuid())
    name         String        @unique // ["groceries", "transportation", "entertainment", "other"]
    budget       Budget[] // One-to-many relationship with Budget
    expenses     Expense[] // One-to-many relationship with Expense
    savingsGoals SavingsGoal[] // One-to-many relationship with SavingsGoal
    debts        Debt[] // One-to-many relationship with Debt
    Incomes      Income[] // One-to-many relationship with RegularIncome
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}
